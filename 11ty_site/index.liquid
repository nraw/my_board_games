---
pagination:
  data: filters
  size: 1
  alias: filter
permalink: "index{{filter.all_players}}.html"
---
<!doctype html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title></title>
	<link href="{{'/style.css' | url }}" rel="stylesheet" />
	 <style>
				.hidden {
						display: none;
				}
        /* Add styles for the selected state */
        .sortable.selected {
            background-color: #1d4ed8; /* dark blue-gray */
            color: white;
            transition: background-color 0.3s ease;
        }
        /* Active player filter button styles */
        .player-filter-btn[data-active="true"] {
            background-color: #2563eb !important; /* blue-600 */
            color: white !important;
            border-color: #1d4ed8 !important; /* blue-700 */
        }
        .dark .player-filter-btn[data-active="true"] {
            background-color: #1d4ed8 !important; /* blue-700 */
            color: white !important;
            border-color: #1e40af !important; /* blue-800 */
        }
        /* Filter button states */
        .filter-btn[data-filter-state="none"] {
            color: #6b7280; /* gray-500 */
        }
        .filter-btn[data-filter-state="include"] {
            color: #2563eb !important; /* blue-600 */
            background-color: rgba(37, 99, 235, 0.1);
            border-radius: 4px;
        }
        .filter-btn[data-filter-state="exclude"] {
            color: #dc2626 !important; /* red-600 */
            background-color: rgba(220, 38, 38, 0.1);
            border-radius: 4px;
        }
        .dark .filter-btn[data-filter-state="none"] {
            color: #9ca3af; /* gray-400 */
        }
        .dark .filter-btn[data-filter-state="include"] {
            color: #3b82f6 !important; /* blue-500 */
            background-color: rgba(59, 130, 246, 0.15);
        }
        .dark .filter-btn[data-filter-state="exclude"] {
            color: #ef4444 !important; /* red-500 */
            background-color: rgba(239, 68, 68, 0.15);
        }
	</style>
</head>

<body class="dark:bg-slate-800 dark:text-white">
	<div class="" id="container">
		<div class = "">


			{% if filter.all_players == "all" %}
			<div class="grid grid-cols-1" id="all-players-table">
			{% else %}
			<div class="grid grid-cols-1 lg:grid-cols-8" id="all-players-table">
			{% endif %}
			{% assign sorted_players = suggested_players | sort: "days_since_last_played" | reverse %}
			{% if filter.all_players == "all" %}
				{% assign player_counts = (-1..-1) %}
			{% else %}
				{% assign player_counts = (1..8) %}
			{% endif %}


			{% for player_count in player_counts %}
			<!-- n-players stats -->
				<div class="col-auto">
					<div id="players-{{ player_count }}"  > </div>
						<div class="z-20 sticky top-0 px-4 py-3 flex justify-between items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10">
							<div>
							<!-- left side -->
							Players: 
							{% if player_count == -1 %}
								All
							{% else %}
								{{ player_count }}
							{% endif %}
							</div>
							<!-- end left side -->
							<!-- right side -->
							<div class='flex'>
									<a data-filter-state="none" data-filter-type="bestPlayer" class="filter-btn flex items-center border rounded px-1 my-1 mx-2" href="#">ðŸ”¸</a>
									<a data-filter-state="none" data-filter-type="selected" class="filter-btn flex items-center border rounded px-1 my-1 mx-2 hidden" href="#">ðŸ”·</a>
								<div class='flex flex-row lg:flex-col items-center'>
									<div class='flex items-center'>
										<a href="#" data-filter-state="none" data-filter-type="short" class="filter-btn px-2 py-1 mx-1 text-sm">
											<i data-lucide="rabbit" class='w-3 m-0'></i>
										</a>
										/
										<a href="#" data-filter-state="none" data-filter-type="long" class="filter-btn px-2 py-1 mx-1 text-sm">
											<i data-lucide="snail" class='w-3 m-0'></i>
										</a>
									</div>
									<div class='flex items-center'>
										<a href="#" data-filter-state="none" data-filter-type="light" class="filter-btn px-2 py-1 mx-1 text-sm">
											<i data-lucide="feather" class='w-3 m-0'></i>
										</a>
										/
										<a href="#" data-filter-state="none" data-filter-type="heavy" class="filter-btn px-2 py-1 mx-1 text-sm">
											<i data-lucide="dumbbell" class='w-3 m-0'></i>
										</a>
									</div>
								</div>

							</div>
							<!-- end right side -->

						</div>
						<div id="magic-{{player_count}}" class="grid grid-cols-1 items-start  hover:items-stretch sorting_container">

						{% for game in sorted_players %} 


						{% if game.players ==player_count or player_count == -1%}
						{% assign days_since = game.days_since_last_played | at_most: 360 %}
						<a class="shadow p-1 mx-2 my-1 text-sm rounded sortable game-card" href="#" 
							data-name="{{ game.name}}"
							data-rating="{{ game.rating}}"
							data-averageweight="{{ game.stats.averageweight }}"
							data-average="{{ game.stats.average }}"
							data-owned="{{ game.stats.owned }}"
							data-isbestplayer="{{ game.is_best_player }}"
							data-numplays="{{ game.numplays}}"
							data-playingtime="{{ game.playingtime}}"
							data-days="{{ game.days_since_last_played}}"
							data-size="{{ game.size }}"
							data-url="{{ game.url }}"
							data-players="{{ game.players }}"
							data-thumbnail="{{ game.thumbnail }}"
							>
							<div class="flex gap-3">
								<!-- Thumbnail -->
								{% if game.thumbnail %}
								<img src="{{ game.thumbnail }}" 
									alt="{{ game.name }}" 
									class="w-14 h-14 rounded-lg object-cover flex-shrink-0"
									loading="lazy">
								{% endif %}
								
								<!-- Content area -->
								<div class="flex-1 min-w-0 space-y-1">
									<!-- Row 1: Title -->
									<div class="truncate">
										{{ game.name }}
									</div>
									
									<!-- Row 2: Metadata -->
									<div class="flex justify-between items-center">
										<!-- Rating (left aligned) -->
										<span class="inline-flex text-gray-600 dark:text-slate-400 items-center">
											<span>{{ game.rating }}</span>
											<i data-lucide="star" class='w-3 ml-0.5'></i>
										</span>
										
										<!-- Other metadata (right aligned) -->
										<div class="flex items-center space-x-2">
											<!-- Best player indicator -->
											{% if game.is_best_player %}
											<span class="text-sm">ðŸ”¸</span>
											{% endif %}
											
											<!-- Speed icon -->
											{% if game.playingtime < 21 %}
											<i data-lucide="rabbit" class='w-3 h-3'></i>
											{% elsif game.playingtime >= 90 %}
											<i data-lucide="snail" class='w-3 h-3'></i>
											{% endif %}
											
											<!-- Weight icon -->
											{% if game.stats.averageweight < 1.5 %}
											<i data-lucide="feather" class='w-3 h-3'></i>
											{% elsif game.stats.averageweight >= 2.1 %}
											<i data-lucide="dumbbell" class='w-3 h-3'></i>
											{% endif %}
											
											<!-- Numplays -->
											{% if game.numplays > 0 %}
												{% assign numplays_colors = "bg-blue-100 dark:bg-blue-900" %}
											{% else %}
												{% assign numplays_colors = "bg-red-100 dark:bg-red-700" %}
											{% endif %}
											<div class="{{ numplays_colors }} rounded-full px-2 py-0.5 text-xs text-center">
												{{ game.numplays }}<span class='text-xs'>x</span>
											</div>
										</div>
									</div>
									
									<!-- Row 3: Progress -->
									{% if days_since > 359 %}
										{% assign days_colors = "bg-red-600 dark:bg-red-500" %}
									{% else %}
										{% assign days_colors = "bg-blue-600 dark:bg-blue-500" %}
									{% endif %}
									<div class="flex w-full h-1.5 bg-gray-200 rounded-full overflow-hidden dark:bg-neutral-700 relative" role="progressbar" aria-valuenow="{{ days_since | divided_by: 3.6}}" aria-valuemin="0" aria-valuemax="100">
											<div class="{{ days_colors }} flex flex-col justify-center rounded-full overflow-hidden text-xs text-white text-center whitespace-nowrap transition duration-500" style="width: {{ days_since | divided_by: 3.6}}%"></div>
											{% for i in (1..12) %}
													<div class="absolute h-full bg-neutral-700 z-0" style="width: 4px; left: {{ i | times: 8.33 }}%;"></div>
													<div class="absolute h-full bg-gray-500" style="width: 1px; left: {{ i | times: 8.33 }}%;"></div>
											{% endfor %}
									</div>
								</div>
							</div>
						</a>
						{% endif %} 
						{% endfor %}
					</div>
				</div>
			<!-- n-players stats -->
				{% endfor %}
			</div>

				
		</div>

		<!-- Start Metrics section -->
		<section class="p-6 rounded-lg shadow-lg">
				<h2 class="text-2xl font-bold mb-4">Metrics</h2>
				<ul class="space-y-2">
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Average number of days since last played:</span>
								<span class="font-semibold px-4">{{ metrics.average_days_since_last_played | round: 2 }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Game that hasn't been played in the longest:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.game_played_latest }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Max days since last played:</span>
								<div class="font-semibold px-4 w-1/2">
									<span>{{ metrics.max_days_since_last_played }}</span>
									<span class="text-slate-400 pl-2"> (- {{ metrics.gain_from_max_played | round: 2 }})</span>
								</div>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Last game played:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.game_last_played }}</span>
						</li>

						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Number of games:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.num_games }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Refreshed at:</span>
								<span class="font-semibold px-4 w-1/2">{{ page.date | date: "%Y-%m-%d %H:%M"  }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Sort:</span>
								<span id="sort_category" class="font-semibold px-4 w-1/2"></span>
						</li>
				</ul>
		</section>
		<!-- End Metrics section -->

		<!-- Players Menu -->
		<div class="sticky bottom-0 grid grid-cols-10 grid-rows-1 z-10 w-full">
		{% for player_count in (1..8) %}

			<button class="player-filter-btn py-3 justify-center flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10 hover:bg-slate-100 dark:hover:bg-slate-600 transition-colors" 
				data-player-count="{{ player_count }}"
				data-active="false">
				P{{ player_count }}
			</button>

		{% endfor %}

			<a class="py-3 justify-center flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10" href="indexall.html">
				All
			</a>

		<div id='reorder-button' data-index="0" class="px-3 py-3 flex items-center font-semibold 
			data-[index='0']:text-blue-500
			data-[index='1']:text-blue-900
			data-[index='2']:text-white
			data-[index='3']:text-slate-600
			data-[index='4']:text-slate-200
			data-[index='5']:text-purple-600
			  bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10" >
					<i data-lucide="arrow-down-up"></i>
			</div>
		</div>
		<!-- End Players Menu -->
	</div>

	<!-- Game Details Modal -->
	<div id="game-modal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-hidden="true">
		<div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
			<!-- Background overlay -->
			<div class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75 dark:bg-gray-900 dark:bg-opacity-80"></div>
			
			<!-- Modal panel -->
			<div class="inline-block align-bottom bg-white dark:bg-slate-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
				<!-- Modal header -->
				<div class="flex justify-between items-start mb-4">
					<h3 id="modal-title" class="text-lg font-medium text-gray-900 dark:text-white pr-4">
						Game Title
					</h3>
					<button id="modal-close" type="button" class="text-gray-400 hover:text-gray-600 dark:text-gray-300 dark:hover:text-gray-100 flex-shrink-0">
						<span class="sr-only">Close</span>
						<i data-lucide="x" class="w-6 h-6"></i>
					</button>
				</div>
				
				<!-- Modal content -->
				<div class="flex gap-4">
					<!-- Thumbnail -->
					<img id="modal-thumbnail" src="" alt="" class="w-20 h-20 rounded-lg object-cover flex-shrink-0 hidden">
					
					<!-- Content area -->
					<div class="flex-1 space-y-4">
					<!-- Game stats -->
					<div class="grid grid-cols-2 gap-4 text-sm">
						<div>
							<span class="text-gray-500 dark:text-gray-400">Your Rating:</span>
							<span id="modal-rating" class="font-medium ml-2">-</span>
							<i data-lucide="star" class='w-3 inline ml-1'></i>
						</div>
						<div>
							<span class="text-gray-500 dark:text-gray-400">Plays:</span>
							<span id="modal-numplays" class="font-medium ml-2">0</span>
						</div>
						<div>
							<span class="text-gray-500 dark:text-gray-400">Players:</span>
							<span id="modal-players" class="font-medium ml-2">-</span>
						</div>
						<div>
							<span class="text-gray-500 dark:text-gray-400">Playing Time:</span>
							<span id="modal-playtime" class="font-medium ml-2">-</span> min
						</div>
						<div>
							<span class="text-gray-500 dark:text-gray-400">Weight:</span>
							<span id="modal-weight" class="font-medium ml-2">-</span>/5
						</div>
						<div>
							<span class="text-gray-500 dark:text-gray-400">BGG Rating:</span>
							<span id="modal-average" class="font-medium ml-2">-</span>
						</div>
					</div>
					
					<!-- Days since last played indicator -->
					<div class="space-y-2">
						<div class="flex justify-between text-sm">
							<span class="text-gray-500 dark:text-gray-400">Last Played:</span>
							<span id="modal-days" class="font-medium">- days ago</span>
						</div>
						<div id="modal-progress" class="flex w-full h-2 bg-gray-200 rounded-full overflow-hidden dark:bg-neutral-700 relative">
							<div id="modal-progress-bar" class="bg-blue-600 dark:bg-blue-500 flex flex-col justify-center rounded-full overflow-hidden transition duration-500" style="width: 0%"></div>
						</div>
					</div>
					
					<!-- Best player indicator -->
					<div id="modal-best-player" class="hidden bg-blue-50 dark:bg-blue-900/30 rounded-lg p-3 text-sm">
						<div class="flex items-center">
							<span class="text-xl mr-2">ðŸ”¸</span>
							<span class="text-blue-800 dark:text-blue-200 font-medium">Best at this player count!</span>
						</div>
					</div>
					</div>
				</div>
				
				<!-- Modal footer -->
				<div class="mt-6 flex flex-col sm:flex-row gap-3">
					<a id="modal-bgg-link" href="#" target="_blank" class="inline-flex justify-center items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-md transition-colors">
						<i data-lucide="external-link" class="w-4 h-4 mr-2"></i>
						View on BoardGameGeek
					</a>
					<button id="modal-cancel" type="button" class="inline-flex justify-center items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-800 dark:text-gray-200 text-sm font-medium rounded-md transition-colors">
						Close
					</button>
				</div>
			</div>
		</div>
	</div>
	<!-- End Game Details Modal -->

	<script>

// Get the container and the button
const button = document.getElementById("reorder-button");
const attributes = ['days', 'numplays', 'name', 'rating', 'average', 'owned', 'size', 'playingtime'];
const sort_category_element = document.getElementById("sort_category");


// Add an event listener to the button
button.addEventListener("click", reorderDivs);
sort_category_element.innerHTML = attributes[0];

// Function to reorder the divs
function reorderDivs() {
	// Get all the divs in the container
	{% comment %} const container = document.getElementById("magic-2"); {% endcomment %}

	const containers = document.querySelectorAll(".sorting_container");
	const button = document.getElementById("reorder-button");


	let attributeValue = parseInt(button.dataset.index, 10) || 0;
	const attributeIndex = (attributeValue + 1) % attributes.length
	const attribute = attributes[attributeIndex]
	
	containers.forEach(container => {

		const divs = container.querySelectorAll(".sortable");
		console.log(attribute)

		// Create an array of the divs
		const divArray = Array.from(divs);

		// Sort the array of divs
		divArray.sort((a, b) => {
				const aValue = a.dataset[attribute];
				const bValue = b.dataset[attribute];

				// Check if the values are numeric
				if (!isNaN(aValue) && !isNaN(bValue)) {
						// Compare as numbers
						return Number(bValue) - Number(aValue);
				} else {
						// Compare as strings
						return aValue.localeCompare(bValue);
				}
		});

		// Clear the container
		container.innerHTML = "";

		// Add the sorted divs back to the container
		divArray.forEach((div) => container.appendChild(div));

	});
	button.dataset.index = attributeIndex;
	sort_category_element.innerHTML = attribute;
}
	</script>
	<script>
// Filter state management system
const filterState = {
    short: 'none',
    long: 'none', 
    light: 'none',
    heavy: 'none',
    bestPlayer: 'none',
    selected: 'none'
};

const HIDE_CLASS = 'hidden';

// Get all the game elements
const games = document.querySelectorAll('.sortable');

// Filter evaluation functions
const filterChecks = {
    short: (game) => Number(game.dataset.playingtime) < 21,
    long: (game) => Number(game.dataset.playingtime) >= 90,
    light: (game) => Number(game.dataset.averageweight) < 1.5,
    heavy: (game) => Number(game.dataset.averageweight) >= 2.1,
    bestPlayer: (game) => game.dataset.isbestplayer === 'true',
    selected: (game) => game.classList.contains('selected')
};

// Apply all active filters to determine which games should be shown
function applyAllFilters() {
    const includeFilters = Object.keys(filterState).filter(key => filterState[key] === 'include');
    const excludeFilters = Object.keys(filterState).filter(key => filterState[key] === 'exclude');
    
    games.forEach(game => {
        let shouldShow = true;
        
        // Check exclude filters first - if any exclude filter matches, hide the game
        for (const filterType of excludeFilters) {
            if (filterChecks[filterType](game)) {
                shouldShow = false;
                break;
            }
        }
        
        // If not excluded and there are include filters, game must match ALL include filters
        if (shouldShow && includeFilters.length > 0) {
            shouldShow = includeFilters.every(filterType => filterChecks[filterType](game));
        }
        
        if (shouldShow) {
            game.classList.remove(HIDE_CLASS);
        } else {
            game.classList.add(HIDE_CLASS);
        }
    });
}

// Update filter button state and apply filters
function toggleFilter(filterType) {
    const states = ['none', 'include', 'exclude'];
    const currentIndex = states.indexOf(filterState[filterType]);
    const nextIndex = (currentIndex + 1) % states.length;
    filterState[filterType] = states[nextIndex];
    
    // Update all buttons of this filter type
    const buttons = document.querySelectorAll(`[data-filter-type="${filterType}"]`);
    buttons.forEach(button => {
        button.setAttribute('data-filter-state', filterState[filterType]);
    });
    
    applyAllFilters();
}

// Initialize filter system
function initializeFilterSystem() {
    // Get all filter buttons and add event listeners
    const filterButtons = document.querySelectorAll('.filter-btn[data-filter-type]');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const filterType = this.getAttribute('data-filter-type');
            toggleFilter(filterType);
        });
    });
}

// Initialize the system
initializeFilterSystem();

// Show selected game filter buttons when games are selected
function showSelectedButtons() {
    const selectedButtons = document.querySelectorAll('[data-filter-type="selected"]');
    selectedButtons.forEach(button => {
        button.classList.remove("hidden");
    });
}

{% if filter.all_players == "all" %}
// Auto-activate best player filter on "all" pages
filterState.bestPlayer = 'include';
document.querySelectorAll('[data-filter-type="bestPlayer"]').forEach(button => {
    button.setAttribute('data-filter-state', 'include');
});
applyAllFilters();
{% endif %}

	</script>
	<script src="{{'/static/lucide.min.js' | url }}"></script>
  <script>
    lucide.createIcons();
  </script>
	<script>
        // Swipe functionality
        let touchStartX = 0;
        let touchEndX = 0;
        let currentElement = null;

        function handleTouchStart(event) {
            touchStartX = event.touches[0].clientX;
            currentElement = event.target.closest('.sortable');
        }

        function handleTouchEnd(event) {
            if (!currentElement) return;
            touchEndX = event.changedTouches[0].clientX;
            handleSwipe();
        }

				function showSelectedButtons() {

					const selectedButtons = document.querySelectorAll('.filterSelected');

					selectedButtons.forEach(button => {
						button.classList.remove("hidden");
					});
				}


        function handleSwipe() {
            const SWIPE_THRESHOLD = 50;
            if (Math.abs(touchEndX - touchStartX) > SWIPE_THRESHOLD) {
                const gameName = currentElement.dataset.name;
                toggleSelectionForGame(gameName);
								showSelectedButtons();
            }
            currentElement = null;
        }

        function toggleSelectionForGame(gameName) {
            const allInstances = document.querySelectorAll(`.sortable[data-name="${gameName}"]`);
            const isCurrentlySelected = currentElement.classList.contains('selected');
            
            allInstances.forEach(instance => {
                if (isCurrentlySelected) {
                    instance.classList.remove('selected');
                } else {
                    instance.classList.add('selected');
                }
            });
            
            // Reapply filters after selection changes
            applyAllFilters();
        }

        document.querySelectorAll('.sortable').forEach(game => {
            game.addEventListener('touchstart', handleTouchStart, false);
            game.addEventListener('touchend', handleTouchEnd, false);
        });
	</script>
	<script>
		// Player count filtering functionality
		let activePlayerCounts = new Set();

		// Get all player filter buttons
		const playerFilterBtns = document.querySelectorAll('.player-filter-btn');

		// Add event listeners to player filter buttons
		playerFilterBtns.forEach(btn => {
			btn.addEventListener('click', function(e) {
				e.preventDefault();
				const playerCount = parseInt(this.getAttribute('data-player-count'));
				const isActive = this.getAttribute('data-active') === 'true';

				if (isActive) {
					// Deactivate this button
					this.setAttribute('data-active', 'false');
					activePlayerCounts.delete(playerCount);
				} else {
					// Activate this button
					this.setAttribute('data-active', 'true');
					activePlayerCounts.add(playerCount);
				}

				applyPlayerCountFilter();
				
				// Also scroll to the player section
				const playerSection = document.getElementById(`players-${playerCount}`);
				if (playerSection) {
					playerSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
				}
			});
		});

		function clearAllPlayerFilters() {
			playerFilterBtns.forEach(btn => {
				btn.setAttribute('data-active', 'false');
			});
			activePlayerCounts.clear();
		}

		function showAllGames() {
			const allGames = document.querySelectorAll('.sortable');
			allGames.forEach(game => {
				game.style.display = '';
			});
		}

		function applyPlayerCountFilter() {
			const allGames = document.querySelectorAll('.sortable');

			if (activePlayerCounts.size === 0) {
				// No filters active, show all games
				showAllGames();
				return;
			}

			// Group games by name to implement AND logic
			const gamesByName = {};
			allGames.forEach(game => {
				const gameName = game.getAttribute('data-name');
				const playerCount = parseInt(game.closest('[id^="magic-"]').id.split('-')[1]);
				
				if (!gamesByName[gameName]) {
					gamesByName[gameName] = {
						elements: [],
						playerCounts: new Set()
					};
				}
				
				gamesByName[gameName].elements.push(game);
				gamesByName[gameName].playerCounts.add(playerCount);
			});

			// Apply AND logic: show games that support ALL selected player counts
			Object.keys(gamesByName).forEach(gameName => {
				const gameData = gamesByName[gameName];
				
				// Check if this game supports all selected player counts
				const supportsAllSelectedCounts = Array.from(activePlayerCounts).every(count => 
					gameData.playerCounts.has(count)
				);

				// Show/hide all instances of this game
				gameData.elements.forEach(gameElement => {
					if (supportsAllSelectedCounts) {
						gameElement.style.display = '';
					} else {
						gameElement.style.display = 'none';
					}
				});
			});
		}
	</script>
	<script>
		// Game Details Modal functionality
		const modal = document.getElementById('game-modal');
		const modalOverlay = modal.querySelector('.fixed.inset-0.transition-opacity');
		const modalClose = document.getElementById('modal-close');
		const modalCancel = document.getElementById('modal-cancel');
		
		// Modal elements for content
		const modalTitle = document.getElementById('modal-title');
		const modalThumbnail = document.getElementById('modal-thumbnail');
		const modalRating = document.getElementById('modal-rating');
		const modalNumplays = document.getElementById('modal-numplays');
		const modalPlayers = document.getElementById('modal-players');
		const modalPlaytime = document.getElementById('modal-playtime');
		const modalWeight = document.getElementById('modal-weight');
		const modalAverage = document.getElementById('modal-average');
		const modalDays = document.getElementById('modal-days');
		const modalProgressBar = document.getElementById('modal-progress-bar');
		const modalBestPlayer = document.getElementById('modal-best-player');
		const modalBggLink = document.getElementById('modal-bgg-link');

		// Add click listeners to all game cards
		function addGameCardListeners() {
			document.querySelectorAll('.game-card').forEach(card => {
				card.addEventListener('click', function(e) {
					e.preventDefault();
					showGameModal(this);
				});
			});
		}

		// Show modal with game details
		function showGameModal(gameCard) {
			const gameData = {
				name: gameCard.dataset.name,
				rating: gameCard.dataset.rating,
				numplays: gameCard.dataset.numplays,
				players: gameCard.dataset.players,
				playingtime: gameCard.dataset.playingtime,
				averageweight: gameCard.dataset.averageweight,
				average: gameCard.dataset.average,
				days: gameCard.dataset.days,
				url: gameCard.dataset.url,
				thumbnail: gameCard.dataset.thumbnail,
				isbestplayer: gameCard.dataset.isbestplayer === 'true'
			};

			// Populate modal content
			modalTitle.textContent = gameData.name;
			
			// Handle thumbnail
			if (gameData.thumbnail && gameData.thumbnail !== 'undefined') {
				modalThumbnail.src = gameData.thumbnail;
				modalThumbnail.alt = gameData.name;
				modalThumbnail.classList.remove('hidden');
			} else {
				modalThumbnail.classList.add('hidden');
			}
			modalRating.textContent = gameData.rating || '-';
			modalNumplays.textContent = gameData.numplays || '0';
			modalPlayers.textContent = gameData.players || '-';
			modalPlaytime.textContent = gameData.playingtime || '-';
			modalWeight.textContent = gameData.averageweight ? parseFloat(gameData.averageweight).toFixed(1) : '-';
			modalAverage.textContent = gameData.average ? parseFloat(gameData.average).toFixed(1) : '-';
			modalBggLink.href = gameData.url || '#';

			// Handle days since last played
			const daysSince = parseInt(gameData.days) || 0;
			const daysLimit = Math.min(daysSince, 360);
			const progressPercent = (daysLimit / 3.6);
			
			modalDays.textContent = daysSince > 359 ? '360+ days ago' : `${daysSince} days ago`;
			modalProgressBar.style.width = `${progressPercent}%`;
			modalProgressBar.className = daysSince > 359 
				? 'bg-red-600 dark:bg-red-500 flex flex-col justify-center rounded-full overflow-hidden transition duration-500'
				: 'bg-blue-600 dark:bg-blue-500 flex flex-col justify-center rounded-full overflow-hidden transition duration-500';

			// Show/hide best player indicator
			if (gameData.isbestplayer) {
				modalBestPlayer.classList.remove('hidden');
			} else {
				modalBestPlayer.classList.add('hidden');
			}

			// Show modal - set aria-hidden before removing hidden class
			modal.setAttribute('aria-hidden', 'false');
			modal.classList.remove('hidden');
			document.body.style.overflow = 'hidden';
			
			// Focus management - use setTimeout to ensure DOM is updated
			setTimeout(() => {
				modalClose.focus();
			}, 0);
		}

		// Hide modal
		function hideGameModal() {
			// Set aria-hidden before adding hidden class
			modal.setAttribute('aria-hidden', 'true');
			modal.classList.add('hidden');
			document.body.style.overflow = '';
		}

		// Event listeners for closing modal
		modalClose.addEventListener('click', hideGameModal);
		modalCancel.addEventListener('click', hideGameModal);
		modalOverlay.addEventListener('click', hideGameModal);

		// Keyboard navigation
		modal.addEventListener('keydown', function(e) {
			if (e.key === 'Escape') {
				hideGameModal();
			}
		});

		// Initialize modal functionality
		addGameCardListeners();
		
		// Re-add listeners when DOM changes (for sorting/filtering)
		const observer = new MutationObserver(function(mutations) {
			mutations.forEach(function(mutation) {
				if (mutation.type === 'childList') {
					addGameCardListeners();
				}
			});
		});
		
		// Observe changes to game containers
		document.querySelectorAll('.sorting_container').forEach(container => {
			observer.observe(container, { childList: true });
		});
	</script>
</body>

</html>
