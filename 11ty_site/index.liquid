---
pagination:
  data: filters
  size: 1
  alias: filter
permalink: "index{{filter.all_players}}.html"
---
<!doctype html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title></title>
	<link href="{{'/style.css' | url }}" rel="stylesheet" />
	 <style>
				.hidden {
						display: none;
				}
        /* Add styles for the selected state */
        .sortable.selected {
            background-color: #1d4ed8; /* dark blue-gray */
            color: white;
            transition: background-color 0.3s ease;
        }
	</style>
</head>

<body class="dark:bg-slate-800 dark:text-white">
	<div class="" id="container">
		<div class = "">


			<div class="grid grid-cols-1 lg:grid-cols-8" id="all-players-table">
			{% assign sorted_players = suggested_players | sort: "days_since_last_played" | reverse %}
			{% if filter.all_players == "all" %}
				{% assign player_counts = (-1..-1) %}
			{% else %}
				{% assign player_counts = (1..8) %}
			{% endif %}


			{% for player_count in player_counts %}
			<!-- n-players stats -->
				<div class="col-auto">
					<div id="players-{{ player_count }}"  > </div>
						<div class="z-20 sticky top-0 px-4 py-3 flex justify-between items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10">
							<div>
							<!-- left side -->
							Players: 
							{% if player_count == -1 %}
								All
							{% else %}
								{{ player_count }}
							{% endif %}
							</div>
							<!-- end left side -->
							<!-- right side -->
							<div class='flex'>
									<a data-selected="0" data-selectedmax="2" class="filterBestPlayer flex items-center border rounded px-1 my-1 mx-2
										data-[selected='0']:dark:border-white/50
										data-[selected='1']:dark:border-blue-500
										" href="#">🔸</a>
									<a data-selected="0" data-selectedmax="2" class="filterSelected flex items-center border rounded px-1 my-1 mx-2 hidden
										data-[selected='0']:dark:border-white/50
										data-[selected='1']:dark:border-blue-500
										" href="#">🔷</a>
								<div class='flex flex-row lg:flex-col items-center'>
									<div class='flex items-center'>
										<a href="#" class="filterShort  px-2 py-1 mx-1 text-sm
												data-[selected='1']:dark:text-blue-500
												data-[selected='2']:dark:text-red-500
												">
											<i data-lucide="rabbit" class='w-3 m-0'></i>
										</a>
										/
										<a href="#" class="filterLong px-2 py-1 mx-1 text-sm
												data-[selected='1']:dark:text-blue-500
												data-[selected='2']:dark:text-red-500
											">
											<i data-lucide="snail" class='w-3 m-0'></i>
										</a>
									</div>
									<div class='flex items-center'>
										<a href="#" class="filterLight px-2 py-1 mx-1 text-sm
												data-[selected='1']:dark:text-blue-500
												data-[selected='2']:dark:text-red-500
											">
											<i data-lucide="feather" class='w-3 m-0'></i>
										</a>
										/
											<a href="#" class="filterHeavy px-2 py-1 mx-1 text-sm
												data-[selected='1']:dark:text-blue-500
												data-[selected='2']:dark:text-red-500
												">
											<i data-lucide="dumbbell" class='w-3 m-0'></i>
										</a>

									</div>
								</div>

							</div>
							<!-- end right side -->

						</div>
						<div id="magic-{{player_count}}" class="grid grid-cols-1 items-start  hover:items-stretch sorting_container">

						{% for game in sorted_players %} 


						{% if game.players ==player_count or player_count == -1%}
						{% assign days_since = game.days_since_last_played | at_most: 360 %}
						<a class="shadow p-1 mx-2 my-1 text-sm rounded sortable" target=”_blank” href="{{ game.url }}" 
							data-name="{{ game.name}}"
							data-rating="{{ game.rating}}"
							data-averageweight="{{ game.stats.averageweight }}"
							data-isbestplayer="{{ game.is_best_player }}"
							data-numplays="{{ game.numplays}}"
							data-playingtime="{{ game.playingtime}}"
							data-days="{{ game.days_since_last_played}}"
							data-size="{{ game.size }}"
							>
							<div class="flex justify-between">

								<div class="truncate">

								{% if game.is_best_player %}
								🔸
								{% endif %}

								{{ game.name }}
								<span class="inline-flex text-gray-300 dark:text-slate-600 items-center">
									<span>- {{ game.rating }}</span>
									<i data-lucide="star" class='w-3 m-0'></i>

								</span>

								</div>
								<div class='flex'>

									<!-- Speed icon -->
									{% if game.playingtime < 21 %}
									<i data-lucide="rabbit" class='px-1'></i>
									{% elsif game.playingtime < 90 %}
									<!-- <i data-lucide="turtle" class='px-1'></i> -->
									{% else %}
									<i data-lucide="snail" class='px-1'></i>
									{% endif %}
									<!-- End Speeed icon -->

									<!-- Weight icon -->
									{% if game.stats.averageweight < 1.5 %}
									<i data-lucide="feather" class='px-1'></i>
									{% elsif game.stats.averageweight < 2.1 %}
									<!-- <i data-lucide="dumbbell" class='px-1'></i> -->
									{% elsif game.stats.averageweight < 5 %}
									<i data-lucide="dumbbell" class='px-1'></i>
									{% endif %}
									<!-- End Weight icon -->

									<!-- Numplays -->
									{% if game.numplays > 0 %}
										{% assign numplays_colors = "bg-blue-100 dark:bg-blue-900" %}
									{% else %}
										{% assign numplays_colors = "bg-red-100 dark:bg-red-700" %}
									{% endif %}
									<div class="{{ numplays_colors }} rounded-full px-2 text-center">
										{{ game.numplays }}<span class='text-xs'>x</span>
									</div>	
									<!-- End Numplays -->

								</div>
								
							</div>
							<!-- Progress -->
							{% if days_since > 359 %}
								{% assign days_colors = "bg-red-600 dark:bg-red-500" %}
							{% else %}
								{% assign days_colors = "bg-blue-600 dark:bg-blue-500" %}
							{% endif %}
							<div class="flex w-full h-1.5 bg-gray-200 rounded-full overflow-hidden dark:bg-neutral-700 relative" role="progressbar" aria-valuenow="{{ days_since | divided_by: 3.6}}" aria-valuemin="0" aria-valuemax="100">
									<div class="{{ days_colors }} flex flex-col justify-center rounded-full overflow-hidden text-xs text-white text-center whitespace-nowrap transition duration-500" style="width: {{ days_since | divided_by: 3.6}}%"></div>
									{% for i in (1..12) %}
											<div class="absolute h-full bg-neutral-700 z-0" style="width: 4px; left: {{ i | times: 8.33 }}%;"></div>
											<div class="absolute h-full bg-gray-500" style="width: 1px; left: {{ i | times: 8.33 }}%;"></div>
									{% endfor %}
							</div>
							<!-- End Progress -->
						</a>
						{% endif %} 
						{% endfor %}
					</div>
				</div>
			<!-- n-players stats -->
				{% endfor %}
			</div>

				
		</div>

		<!-- Start Metrics section -->
		<section class="p-6 rounded-lg shadow-lg">
				<h2 class="text-2xl font-bold mb-4">Metrics</h2>
				<ul class="space-y-2">
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Average number of days since last played:</span>
								<span class="font-semibold px-4">{{ metrics.average_days_since_last_played | round: 2 }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Game that hasn't been played in the longest:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.game_played_latest }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Max days since last played:</span>
								<div class="font-semibold px-4 w-1/2">
									<span>{{ metrics.max_days_since_last_played }}</span>
									<span class="text-slate-400 pl-2"> (- {{ metrics.gain_from_max_played | round: 2 }})</span>
								</div>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Last game played:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.game_last_played }}</span>
						</li>

						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Number of games:</span>
								<span class="font-semibold px-4 w-1/2">{{ metrics.num_games }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Refreshed at:</span>
								<span class="font-semibold px-4 w-1/2">{{ page.date | date: "%Y-%m-%d %H:%M"  }}</span>
						</li>
						<li class="flex items-center">
								<span class="text-sm text-slate-400 w-1/2">Sort:</span>
								<span id="sort_category" class="font-semibold px-4 w-1/2"></span>
						</li>
				</ul>
		</section>
		<!-- End Metrics section -->

		<!-- Players Menu -->
		<div class="sticky bottom-0 grid grid-cols-10 grid-rows-1 z-10 w-full">
		{% for player_count in (1..8) %}

			<a class="py-3 justify-center flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10" href="{{"/#players-" | append: player_count |url}}">
				P{{ player_count }}
			</a>

		{% endfor %}

			<a class="py-3 justify-center flex items-center font-semibold text-sm text-slate-900 dark:text-slate-200 bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10" href="indexall.html">
				All
			</a>

		<div id='reorder-button' data-index="0" class="px-3 py-3 flex items-center font-semibold 
			data-[index='0']:text-blue-500
			data-[index='1']:text-blue-900
			data-[index='2']:text-white
			data-[index='3']:text-slate-600
			data-[index='4']:text-purple-600
			  bg-slate-50/90 dark:bg-slate-700/90 backdrop-blur-sm ring-1 ring-slate-900/10 dark:ring-black/10" >
					<i data-lucide="arrow-down-up"></i>
			</div>
		</div>
		<!-- End Players Menu -->
	</div>

	<script>

// Get the container and the button
const button = document.getElementById("reorder-button");
const attributes = ['days', 'numplays', 'name', 'rating', 'size'];
const sort_category_element = document.getElementById("sort_category");


// Add an event listener to the button
button.addEventListener("click", reorderDivs);
sort_category_element.innerHTML = attributes[0];

// Function to reorder the divs
function reorderDivs() {
	// Get all the divs in the container
	{% comment %} const container = document.getElementById("magic-2"); {% endcomment %}

	const containers = document.querySelectorAll(".sorting_container");
	const button = document.getElementById("reorder-button");


	let attributeValue = parseInt(button.dataset.index, 10) || 0;
	const attributeIndex = (attributeValue + 1) % attributes.length
	const attribute = attributes[attributeIndex]
	
	containers.forEach(container => {

		const divs = container.querySelectorAll(".sortable");
		console.log(attribute)

		// Create an array of the divs
		const divArray = Array.from(divs);

		// Sort the array of divs
		divArray.sort((a, b) => {
				const aValue = a.dataset[attribute];
				const bValue = b.dataset[attribute];

				// Check if the values are numeric
				if (!isNaN(aValue) && !isNaN(bValue)) {
						// Compare as numbers
						return Number(bValue) - Number(aValue);
				} else {
						// Compare as strings
						return aValue.localeCompare(bValue);
				}
		});

		// Clear the container
		container.innerHTML = "";

		// Add the sorted divs back to the container
		divArray.forEach((div) => container.appendChild(div));

	});
	button.dataset.index = attributeIndex;
	sort_category_element.innerHTML = attribute;
}
	</script>
	<script>
// Define the CSS class for hiding elements
const HIDE_CLASS = 'hidden';

// Get all the game elements
const games = document.querySelectorAll('.sortable');

// Define the filter functions
function filterShort() {
    games.forEach(game => {
        const playingTime = Number(game.dataset.playingtime);
        if (playingTime >= 21) {
            game.classList.add(HIDE_CLASS);
						console.log(game.classList)
        } else {
            game.classList.remove(HIDE_CLASS);
        }
    });
}

function filterLong() {
    games.forEach(game => {
        const playingTime = Number(game.dataset.playingtime);
        if (playingTime <= 89) {
            game.classList.add(HIDE_CLASS);
        } else {
            game.classList.remove(HIDE_CLASS);
        }
    });
}

function filterLight() {
    games.forEach(game => {
        const weight = Number(game.dataset.averageweight);
        if (weight >= 1.5) {
            game.classList.add(HIDE_CLASS);
        } else {
            game.classList.remove(HIDE_CLASS);
        }
    });
}

function filterHeavy() {
    games.forEach(game => {
        const weight = Number(game.dataset.averageweight);
        if (weight <= 2) {
            game.classList.add(HIDE_CLASS);
        } else {
            game.classList.remove(HIDE_CLASS);
        }
    });
}

function filterBestPlayer() {
    games.forEach(game => {
        const isBestPlayer = game.dataset.isbestplayer === 'true';
        if (!isBestPlayer) {
            game.classList.add(HIDE_CLASS);
        } else {
            game.classList.remove(HIDE_CLASS);
        }
    });
}
function filterSelected() {
		const filterButton = document.querySelector('.filterSelected');
		const isActive = filterButton.classList.toggle('active');
		
		games.forEach(game => {
				if (isActive && !game.classList.contains('selected')) {
						game.classList.add(HIDE_CLASS);
				} else {
						game.classList.remove(HIDE_CLASS);
				}
		});
}

// Get all the buttons for each filter
const shortButtons = document.querySelectorAll('.filterShort');
const longButtons = document.querySelectorAll('.filterLong');
const lightButtons = document.querySelectorAll('.filterLight');
const heavyButtons = document.querySelectorAll('.filterHeavy');
const bestPlayerButtons = document.querySelectorAll('.filterBestPlayer');
const selectedButtons = document.querySelectorAll('.filterSelected');


function increaseDataSelected(button) {
    let currentVal = parseInt(button.getAttribute('data-selected')) || 0;
    let maxVal = parseInt(button.getAttribute('data-selectedmax')) || 3;
    button.setAttribute('data-selected', (currentVal + 1) % maxVal);
}
// Add the event listener to each button
shortButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterShort();
}));

longButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterLong();
}));

lightButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterLight();
}));

heavyButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterHeavy();
}));

bestPlayerButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterBestPlayer();
}));

selectedButtons.forEach(button => button.addEventListener('click', function() {
    increaseDataSelected(button);
    filterSelected();
}));

{% if filter.all_players == "all" %}
filterBestPlayer();
{% endif %}

	</script>
	<script src="https://unpkg.com/lucide@latest"></script>
  <script>
    lucide.createIcons();
  </script>
	<script>
        // Swipe functionality
        let touchStartX = 0;
        let touchEndX = 0;
        let currentElement = null;

        function handleTouchStart(event) {
            touchStartX = event.touches[0].clientX;
            currentElement = event.target.closest('.sortable');
        }

        function handleTouchEnd(event) {
            if (!currentElement) return;
            touchEndX = event.changedTouches[0].clientX;
            handleSwipe();
        }

				function showSelectedButtons() {

					const selectedButtons = document.querySelectorAll('.filterSelected');

					selectedButtons.forEach(button => {
						button.classList.remove("hidden");
					});
				}


        function handleSwipe() {
            const SWIPE_THRESHOLD = 50;
            if (Math.abs(touchEndX - touchStartX) > SWIPE_THRESHOLD) {
                const gameName = currentElement.dataset.name;
                toggleSelectionForGame(gameName);
								showSelectedButtons();
            }
            currentElement = null;
        }

        function toggleSelectionForGame(gameName) {
            const allInstances = document.querySelectorAll(`.sortable[data-name="${gameName}"]`);
            const isCurrentlySelected = currentElement.classList.contains('selected');
            
            allInstances.forEach(instance => {
                if (isCurrentlySelected) {
                    instance.classList.remove('selected');
                } else {
                    instance.classList.add('selected');
                }
            });
        }

        document.querySelectorAll('.sortable').forEach(game => {
            game.addEventListener('touchstart', handleTouchStart, false);
            game.addEventListener('touchend', handleTouchEnd, false);
        });
	</script>
</body>

</html>
